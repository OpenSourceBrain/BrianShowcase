'''
Brian simulator compliant Python export for:

Components:
    passiveChan (Type: ionChannelHH:  conductance=1.0E-11 (SI conductance))
    naChan (Type: ionChannelHH:  conductance=1.0E-11 (SI conductance))
    kChan (Type: ionChannelHH:  conductance=1.0E-11 (SI conductance))
    hhcell (Type: cell)
    pulseGen1 (Type: pulseGenerator:  delay=0.1 (SI time) duration=0.1 (SI time) amplitude=8.000000000000001E-11 (SI current))
    net1 (Type: network)
    sim1 (Type: Simulation:  length=0.3 (SI time) step=1.0E-5 (SI time))

'''
'''
    This Brian file has been generated by org.neuroml.export (see https://github.com/NeuroML/org.neuroml.export)
         org.neuroml.export  v1.8.1
         org.neuroml.model   v1.8.1
         jLEMS               v0.10.6
'''
from brian2 import *

from math import *
import sys

import numpy as np


if len(sys.argv) > 1 and sys.argv[1] == '-nogui':
    show_gui = False
else:
    show_gui = True

# Adding simulation Component(id=sim1 type=Simulation) of network: net1 (Type: network)

defaultclock.dt = 0.01*msecond
duration = 300.0*msecond
steps = int(duration/defaultclock.dt)+1

#    Population hhpop contains components of: Component(id=hhcell type=cell) 

hhcell_eqs=Equations('''
    dbioPhys1_membraneProperties_naChans_naChan_m_q/dt = ((bioPhys1_membraneProperties_naChans_naChan_m_inf - bioPhys1_membraneProperties_naChans_naChan_m_q) / bioPhys1_membraneProperties_naChans_naChan_m_tau) :  1
    dbioPhys1_membraneProperties_naChans_naChan_h_q/dt = ((bioPhys1_membraneProperties_naChans_naChan_h_inf - bioPhys1_membraneProperties_naChans_naChan_h_q) / bioPhys1_membraneProperties_naChans_naChan_h_tau) :  1
    dbioPhys1_membraneProperties_kChans_kChan_n_q/dt = ((bioPhys1_membraneProperties_kChans_kChan_n_inf - bioPhys1_membraneProperties_kChans_kChan_n_q) / bioPhys1_membraneProperties_kChans_kChan_n_tau) :  1
    dv/dt = ((iChannels + iSyn) / totCap) :  volt
    morph1_0_LEN = 1.0 * meter : meter 
    morph1_0_proximal_MICRON = 1.0E-6 * meter : meter 
    morph1_0_distal_MICRON = 1.0E-6 * meter : meter 
    bioPhys1_membraneProperties_leak_vShift = 0.0 * volt : volt 
    bioPhys1_membraneProperties_naChans_vShift = 0.0 * volt : volt 
    bioPhys1_membraneProperties_kChans_vShift = 0.0 * volt : volt 
    morph1_0_proximal_x = 0.0: 1 
    morph1_0_proximal_y = 0.0: 1 
    morph1_0_proximal_z = 0.0: 1 
    morph1_0_proximal_diameter = 17.841242: 1 
    morph1_0_distal_x = 0.0: 1 
    morph1_0_distal_y = 0.0: 1 
    morph1_0_distal_z = 0.0: 1 
    morph1_0_distal_diameter = 17.841242: 1 
    bioPhys1_membraneProperties_spikeThresh_value = -0.02 * volt : volt 
    bioPhys1_membraneProperties_initMembPotential_value = -0.065 * volt : volt 
    bioPhys1_membraneProperties_leak_erev = -0.0543 * volt : volt 
    bioPhys1_membraneProperties_leak_condDensity = 3.0 * kilogram**-1 * meter**-4 * second**3 * amp**2 : kilogram**-1 * meter**-4 * second**3 * amp**2 
    bioPhys1_membraneProperties_leak_passiveChan_conductance = 1.0E-11 * siemens : siemens 
    bioPhys1_membraneProperties_naChans_erev = 0.05 * volt : volt 
    bioPhys1_membraneProperties_naChans_condDensity = 1200.0 * kilogram**-1 * meter**-4 * second**3 * amp**2 : kilogram**-1 * meter**-4 * second**3 * amp**2 
    bioPhys1_membraneProperties_naChans_naChan_conductance = 1.0E-11 * siemens : siemens 
    bioPhys1_membraneProperties_naChans_naChan_m_instances = 3.0: 1 
    bioPhys1_membraneProperties_naChans_naChan_m_forwardRate_rate = 1000.0 * second**-1 : second**-1 
    bioPhys1_membraneProperties_naChans_naChan_m_forwardRate_midpoint = -0.04 * volt : volt 
    bioPhys1_membraneProperties_naChans_naChan_m_forwardRate_scale = 0.01 * volt : volt 
    bioPhys1_membraneProperties_naChans_naChan_m_reverseRate_rate = 4000.0 * second**-1 : second**-1 
    bioPhys1_membraneProperties_naChans_naChan_m_reverseRate_midpoint = -0.065 * volt : volt 
    bioPhys1_membraneProperties_naChans_naChan_m_reverseRate_scale = -0.018 * volt : volt 
    bioPhys1_membraneProperties_naChans_naChan_h_instances = 1.0: 1 
    bioPhys1_membraneProperties_naChans_naChan_h_forwardRate_rate = 70.0 * second**-1 : second**-1 
    bioPhys1_membraneProperties_naChans_naChan_h_forwardRate_midpoint = -0.065 * volt : volt 
    bioPhys1_membraneProperties_naChans_naChan_h_forwardRate_scale = -0.02 * volt : volt 
    bioPhys1_membraneProperties_naChans_naChan_h_reverseRate_rate = 1000.0 * second**-1 : second**-1 
    bioPhys1_membraneProperties_naChans_naChan_h_reverseRate_midpoint = -0.035 * volt : volt 
    bioPhys1_membraneProperties_naChans_naChan_h_reverseRate_scale = 0.01 * volt : volt 
    bioPhys1_membraneProperties_kChans_erev = -0.077 * volt : volt 
    bioPhys1_membraneProperties_kChans_condDensity = 360.0 * kilogram**-1 * meter**-4 * second**3 * amp**2 : kilogram**-1 * meter**-4 * second**3 * amp**2 
    bioPhys1_membraneProperties_kChans_kChan_conductance = 1.0E-11 * siemens : siemens 
    bioPhys1_membraneProperties_kChans_kChan_n_instances = 4.0: 1 
    bioPhys1_membraneProperties_kChans_kChan_n_forwardRate_rate = 100.0 * second**-1 : second**-1 
    bioPhys1_membraneProperties_kChans_kChan_n_forwardRate_midpoint = -0.055 * volt : volt 
    bioPhys1_membraneProperties_kChans_kChan_n_forwardRate_scale = 0.01 * volt : volt 
    bioPhys1_membraneProperties_kChans_kChan_n_reverseRate_rate = 125.0 * second**-1 : second**-1 
    bioPhys1_membraneProperties_kChans_kChan_n_reverseRate_midpoint = -0.065 * volt : volt 
    bioPhys1_membraneProperties_kChans_kChan_n_reverseRate_scale = -0.08 * volt : volt 
    bioPhys1_membraneProperties_specificCapacitance_value = 0.01 * kilogram**-1 * meter**-4 * second**4 * amp**2 : kilogram**-1 * meter**-4 * second**4 * amp**2 
    bioPhys1_intracellularProperties_resistivity_value = 0.3 * kilogram**2 * meter**2 * second**-3 * amp**-2 : kilogram**2 * meter**2 * second**-3 * amp**-2 
    dspiking/dt = 0 * 1/second :  1
    morph1_0_proximal_radius = (morph1_0_proximal_MICRON * (morph1_0_proximal_diameter / 2.0)) :  meter
    morph1_0_proximal_xLength = (morph1_0_proximal_MICRON * morph1_0_proximal_x) :  meter
    morph1_0_proximal_yLength = (morph1_0_proximal_MICRON * morph1_0_proximal_y) :  meter
    morph1_0_proximal_zLength = (morph1_0_proximal_MICRON * morph1_0_proximal_z) :  meter
    morph1_0_distal_radius = (morph1_0_distal_MICRON * (morph1_0_distal_diameter / 2.0)) :  meter
    morph1_0_distal_xLength = (morph1_0_distal_MICRON * morph1_0_distal_x) :  meter
    morph1_0_distal_yLength = (morph1_0_distal_MICRON * morph1_0_distal_y) :  meter
    morph1_0_distal_zLength = (morph1_0_distal_MICRON * morph1_0_distal_z) :  meter
    morph1_0_radDist = morph1_0_distal_radius :  meter
    morph1_0_dx = morph1_0_distal_xLength :  meter
    morph1_0_dy = morph1_0_distal_yLength :  meter
    morph1_0_dz = morph1_0_distal_zLength :  meter
    morph1_0_px = morph1_0_proximal_xLength :  meter
    morph1_0_py = morph1_0_proximal_yLength :  meter
    morph1_0_pz = morph1_0_proximal_zLength :  meter
    morph1_0_length = (sqrt((((((morph1_0_dx - morph1_0_px) * (morph1_0_dx - morph1_0_px)) + ((morph1_0_dy - morph1_0_py) * (morph1_0_dy - morph1_0_py))) + ((morph1_0_dz - morph1_0_pz) * (morph1_0_dz - morph1_0_pz))) / (morph1_0_LEN * morph1_0_LEN))) * morph1_0_LEN) :  meter
    bioPhys1_membraneProperties_leak_passiveChan_conductanceScale = 1 :  1
    bioPhys1_membraneProperties_leak_passiveChan_fopen0 = 1 :  1
    bioPhys1_membraneProperties_leak_passiveChan_fopen = (bioPhys1_membraneProperties_leak_passiveChan_conductanceScale * bioPhys1_membraneProperties_leak_passiveChan_fopen0) :  1
    bioPhys1_membraneProperties_leak_passiveChan_g = (bioPhys1_membraneProperties_leak_passiveChan_conductance * bioPhys1_membraneProperties_leak_passiveChan_fopen) :  siemens
    bioPhys1_membraneProperties_leak_channelf = bioPhys1_membraneProperties_leak_passiveChan_fopen :  1
    bioPhys1_membraneProperties_leak_gDensity = (bioPhys1_membraneProperties_leak_condDensity * bioPhys1_membraneProperties_leak_channelf) :  kilogram**-1 * meter**-4 * second**3 * amp**2
    bioPhys1_membraneProperties_leak_iDensity = (bioPhys1_membraneProperties_leak_gDensity * (bioPhys1_membraneProperties_leak_erev - v)) :  meter**-2 * amp
    bioPhys1_membraneProperties_naChans_naChan_m_forwardRate_x = ((v - bioPhys1_membraneProperties_naChans_naChan_m_forwardRate_midpoint) / bioPhys1_membraneProperties_naChans_naChan_m_forwardRate_scale) :  1
    bioPhys1_membraneProperties_naChans_naChan_m_reverseRate_r = (bioPhys1_membraneProperties_naChans_naChan_m_reverseRate_rate * exp(((v - bioPhys1_membraneProperties_naChans_naChan_m_reverseRate_midpoint) / bioPhys1_membraneProperties_naChans_naChan_m_reverseRate_scale))) :  second**-1
    bioPhys1_membraneProperties_naChans_naChan_m_rateScale = 1 :  1
    bioPhys1_membraneProperties_naChans_naChan_m_alpha = bioPhys1_membraneProperties_naChans_naChan_m_forwardRate_r :  second**-1
    bioPhys1_membraneProperties_naChans_naChan_m_beta = bioPhys1_membraneProperties_naChans_naChan_m_reverseRate_r :  second**-1
    bioPhys1_membraneProperties_naChans_naChan_m_fcond = (bioPhys1_membraneProperties_naChans_naChan_m_q ** bioPhys1_membraneProperties_naChans_naChan_m_instances) :  1
    bioPhys1_membraneProperties_naChans_naChan_m_inf = (bioPhys1_membraneProperties_naChans_naChan_m_alpha / (bioPhys1_membraneProperties_naChans_naChan_m_alpha + bioPhys1_membraneProperties_naChans_naChan_m_beta)) :  1
    bioPhys1_membraneProperties_naChans_naChan_m_tau = (1.0 / ((bioPhys1_membraneProperties_naChans_naChan_m_alpha + bioPhys1_membraneProperties_naChans_naChan_m_beta) * bioPhys1_membraneProperties_naChans_naChan_m_rateScale)) :  second
    bioPhys1_membraneProperties_naChans_naChan_h_forwardRate_r = (bioPhys1_membraneProperties_naChans_naChan_h_forwardRate_rate * exp(((v - bioPhys1_membraneProperties_naChans_naChan_h_forwardRate_midpoint) / bioPhys1_membraneProperties_naChans_naChan_h_forwardRate_scale))) :  second**-1
    bioPhys1_membraneProperties_naChans_naChan_h_reverseRate_r = (bioPhys1_membraneProperties_naChans_naChan_h_reverseRate_rate / (1.0 + exp((0.0 - ((v - bioPhys1_membraneProperties_naChans_naChan_h_reverseRate_midpoint) / bioPhys1_membraneProperties_naChans_naChan_h_reverseRate_scale))))) :  second**-1
    bioPhys1_membraneProperties_naChans_naChan_h_rateScale = 1 :  1
    bioPhys1_membraneProperties_naChans_naChan_h_alpha = bioPhys1_membraneProperties_naChans_naChan_h_forwardRate_r :  second**-1
    bioPhys1_membraneProperties_naChans_naChan_h_beta = bioPhys1_membraneProperties_naChans_naChan_h_reverseRate_r :  second**-1
    bioPhys1_membraneProperties_naChans_naChan_h_fcond = (bioPhys1_membraneProperties_naChans_naChan_h_q ** bioPhys1_membraneProperties_naChans_naChan_h_instances) :  1
    bioPhys1_membraneProperties_naChans_naChan_h_inf = (bioPhys1_membraneProperties_naChans_naChan_h_alpha / (bioPhys1_membraneProperties_naChans_naChan_h_alpha + bioPhys1_membraneProperties_naChans_naChan_h_beta)) :  1
    bioPhys1_membraneProperties_naChans_naChan_h_tau = (1.0 / ((bioPhys1_membraneProperties_naChans_naChan_h_alpha + bioPhys1_membraneProperties_naChans_naChan_h_beta) * bioPhys1_membraneProperties_naChans_naChan_h_rateScale)) :  second
    bioPhys1_membraneProperties_naChans_naChan_conductanceScale = 1 :  1
    bioPhys1_membraneProperties_naChans_naChan_fopen0 = 1 * bioPhys1_membraneProperties_naChans_naChan_m_fcond * bioPhys1_membraneProperties_naChans_naChan_h_fcond :  1
    bioPhys1_membraneProperties_naChans_naChan_fopen = (bioPhys1_membraneProperties_naChans_naChan_conductanceScale * bioPhys1_membraneProperties_naChans_naChan_fopen0) :  1
    bioPhys1_membraneProperties_naChans_naChan_g = (bioPhys1_membraneProperties_naChans_naChan_conductance * bioPhys1_membraneProperties_naChans_naChan_fopen) :  siemens
    bioPhys1_membraneProperties_naChans_channelf = bioPhys1_membraneProperties_naChans_naChan_fopen :  1
    bioPhys1_membraneProperties_naChans_gDensity = (bioPhys1_membraneProperties_naChans_condDensity * bioPhys1_membraneProperties_naChans_channelf) :  kilogram**-1 * meter**-4 * second**3 * amp**2
    bioPhys1_membraneProperties_naChans_iDensity = (bioPhys1_membraneProperties_naChans_gDensity * (bioPhys1_membraneProperties_naChans_erev - v)) :  meter**-2 * amp
    bioPhys1_membraneProperties_kChans_kChan_n_forwardRate_x = ((v - bioPhys1_membraneProperties_kChans_kChan_n_forwardRate_midpoint) / bioPhys1_membraneProperties_kChans_kChan_n_forwardRate_scale) :  1
    bioPhys1_membraneProperties_kChans_kChan_n_reverseRate_r = (bioPhys1_membraneProperties_kChans_kChan_n_reverseRate_rate * exp(((v - bioPhys1_membraneProperties_kChans_kChan_n_reverseRate_midpoint) / bioPhys1_membraneProperties_kChans_kChan_n_reverseRate_scale))) :  second**-1
    bioPhys1_membraneProperties_kChans_kChan_n_rateScale = 1 :  1
    bioPhys1_membraneProperties_kChans_kChan_n_alpha = bioPhys1_membraneProperties_kChans_kChan_n_forwardRate_r :  second**-1
    bioPhys1_membraneProperties_kChans_kChan_n_beta = bioPhys1_membraneProperties_kChans_kChan_n_reverseRate_r :  second**-1
    bioPhys1_membraneProperties_kChans_kChan_n_fcond = (bioPhys1_membraneProperties_kChans_kChan_n_q ** bioPhys1_membraneProperties_kChans_kChan_n_instances) :  1
    bioPhys1_membraneProperties_kChans_kChan_n_inf = (bioPhys1_membraneProperties_kChans_kChan_n_alpha / (bioPhys1_membraneProperties_kChans_kChan_n_alpha + bioPhys1_membraneProperties_kChans_kChan_n_beta)) :  1
    bioPhys1_membraneProperties_kChans_kChan_n_tau = (1.0 / ((bioPhys1_membraneProperties_kChans_kChan_n_alpha + bioPhys1_membraneProperties_kChans_kChan_n_beta) * bioPhys1_membraneProperties_kChans_kChan_n_rateScale)) :  second
    bioPhys1_membraneProperties_kChans_kChan_conductanceScale = 1 :  1
    bioPhys1_membraneProperties_kChans_kChan_fopen0 = 1 * bioPhys1_membraneProperties_kChans_kChan_n_fcond :  1
    bioPhys1_membraneProperties_kChans_kChan_fopen = (bioPhys1_membraneProperties_kChans_kChan_conductanceScale * bioPhys1_membraneProperties_kChans_kChan_fopen0) :  1
    bioPhys1_membraneProperties_kChans_kChan_g = (bioPhys1_membraneProperties_kChans_kChan_conductance * bioPhys1_membraneProperties_kChans_kChan_fopen) :  siemens
    bioPhys1_membraneProperties_kChans_channelf = bioPhys1_membraneProperties_kChans_kChan_fopen :  1
    bioPhys1_membraneProperties_kChans_gDensity = (bioPhys1_membraneProperties_kChans_condDensity * bioPhys1_membraneProperties_kChans_channelf) :  kilogram**-1 * meter**-4 * second**3 * amp**2
    bioPhys1_membraneProperties_kChans_iDensity = (bioPhys1_membraneProperties_kChans_gDensity * (bioPhys1_membraneProperties_kChans_erev - v)) :  meter**-2 * amp
    bioPhys1_membraneProperties_specificCapacitance_specCap = bioPhys1_membraneProperties_specificCapacitance_value :  kilogram**-1 * meter**-4 * second**4 * amp**2
    bioPhys1_membraneProperties_totSpecCap = (0 * kilogram**-1 * meter**-4 * second**4 * amp**2) + bioPhys1_membraneProperties_specificCapacitance_specCap :  kilogram**-1 * meter**-4 * second**4 * amp**2
    bioPhys1_membraneProperties_totChanPopCurrent = 0 *  amp :  amp
    bioPhys1_membraneProperties_totChanDensCurrentDensity = (0 * meter**-2 * amp) + bioPhys1_membraneProperties_leak_iDensity + bioPhys1_membraneProperties_naChans_iDensity + bioPhys1_membraneProperties_kChans_iDensity :  meter**-2 * amp
    bioPhys1_membraneProperties_totChanCurrent = (bioPhys1_membraneProperties_totChanPopCurrent + (bioPhys1_membraneProperties_totChanDensCurrentDensity * surfaceArea)) :  amp
    bioPhys1_membraneProperties_totChanPopCurrentCa = 0 *  amp :  amp
    bioPhys1_membraneProperties_totChanDensCurrentDensityCa = 0 *  meter**-2 * amp :  meter**-2 * amp
    bioPhys1_membraneProperties_iCa = (bioPhys1_membraneProperties_totChanPopCurrentCa + (bioPhys1_membraneProperties_totChanDensCurrentDensityCa * surfaceArea)) :  amp
    bioPhys1_intracellularProperties_caConc = 0 *  mole :  mole
    bioPhys1_intracellularProperties_caConcExt = 0 *  mole :  mole
    bioPhys1_totSpecCap = bioPhys1_membraneProperties_totSpecCap :  kilogram**-1 * meter**-4 * second**4 * amp**2
    initMembPot = bioPhys1_membraneProperties_initMembPotential_value :  volt
    thresh = bioPhys1_membraneProperties_spikeThresh_value :  volt
    surfaceArea = (0 * meter**2) + morph1_0_surfaceArea :  meter**2
    totSpecCap = bioPhys1_totSpecCap :  kilogram**-1 * meter**-4 * second**4 * amp**2
    totCap = (totSpecCap * surfaceArea) :  farad
    iChannels = bioPhys1_membraneProperties_totChanCurrent :  amp
    iSyn = hhpop_iSyn(t) :  amp
    iCa = bioPhys1_membraneProperties_iCa :  amp
    caConc = bioPhys1_intracellularProperties_caConc :  mole
    caConcExt = bioPhys1_intracellularProperties_caConcExt :  mole
    morph1_0_surfaceArea =  ( int((morph1_0_length == (0.0 * morph1_0_LEN))) * ((((4.0 * morph1_0_radDist) * morph1_0_radDist) * 3.14159265)) )  +  ( int((morph1_0_length > (0.0 * morph1_0_LEN))) * ((((2.0 * morph1_0_radDist) * 3.14159265) * morph1_0_length)) )  :  meter**2
    bioPhys1_membraneProperties_naChans_naChan_m_forwardRate_r =  ( int((bioPhys1_membraneProperties_naChans_naChan_m_forwardRate_x != 0.0)) * ((bioPhys1_membraneProperties_naChans_naChan_m_forwardRate_rate * (bioPhys1_membraneProperties_naChans_naChan_m_forwardRate_x / (1.0 - exp((0.0 - bioPhys1_membraneProperties_naChans_naChan_m_forwardRate_x)))))) )  +  ( int((bioPhys1_membraneProperties_naChans_naChan_m_forwardRate_x == 0.0)) * (bioPhys1_membraneProperties_naChans_naChan_m_forwardRate_rate) )  :  second**-1
    bioPhys1_membraneProperties_kChans_kChan_n_forwardRate_r =  ( int((bioPhys1_membraneProperties_kChans_kChan_n_forwardRate_x != 0.0)) * ((bioPhys1_membraneProperties_kChans_kChan_n_forwardRate_rate * (bioPhys1_membraneProperties_kChans_kChan_n_forwardRate_x / (1.0 - exp((0.0 - bioPhys1_membraneProperties_kChans_kChan_n_forwardRate_x)))))) )  +  ( int((bioPhys1_membraneProperties_kChans_kChan_n_forwardRate_x == 0.0)) * (bioPhys1_membraneProperties_kChans_kChan_n_forwardRate_rate) )  :  second**-1
''')

hhpop = NeuronGroup(1, model=hhcell_eqs, threshold = 'v > thresh and spiking < 0.5', reset = """spiking = 1""")
hhpop.bioPhys1_membraneProperties_naChans_naChan_m_q = ( hhpop.bioPhys1_membraneProperties_naChans_naChan_m_alpha  / ( hhpop.bioPhys1_membraneProperties_naChans_naChan_m_alpha  +  hhpop.bioPhys1_membraneProperties_naChans_naChan_m_beta ))
hhpop.bioPhys1_membraneProperties_naChans_naChan_h_q = ( hhpop.bioPhys1_membraneProperties_naChans_naChan_h_alpha  / ( hhpop.bioPhys1_membraneProperties_naChans_naChan_h_alpha  +  hhpop.bioPhys1_membraneProperties_naChans_naChan_h_beta ))
hhpop.bioPhys1_membraneProperties_kChans_kChan_n_q = ( hhpop.bioPhys1_membraneProperties_kChans_kChan_n_alpha  / ( hhpop.bioPhys1_membraneProperties_kChans_kChan_n_alpha  +  hhpop.bioPhys1_membraneProperties_kChans_kChan_n_beta ))
hhpop.spiking = 0.0
hhpop.v = hhpop.bioPhys1_membraneProperties_initMembPotential_value
# Initialise a second time...
hhpop.bioPhys1_membraneProperties_naChans_naChan_m_q = ( hhpop.bioPhys1_membraneProperties_naChans_naChan_m_alpha  / ( hhpop.bioPhys1_membraneProperties_naChans_naChan_m_alpha  +  hhpop.bioPhys1_membraneProperties_naChans_naChan_m_beta ))
hhpop.bioPhys1_membraneProperties_naChans_naChan_h_q = ( hhpop.bioPhys1_membraneProperties_naChans_naChan_h_alpha  / ( hhpop.bioPhys1_membraneProperties_naChans_naChan_h_alpha  +  hhpop.bioPhys1_membraneProperties_naChans_naChan_h_beta ))
hhpop.bioPhys1_membraneProperties_kChans_kChan_n_q = ( hhpop.bioPhys1_membraneProperties_kChans_kChan_n_alpha  / ( hhpop.bioPhys1_membraneProperties_kChans_kChan_n_alpha  +  hhpop.bioPhys1_membraneProperties_kChans_kChan_n_beta ))
hhpop.spiking = 0.0
hhpop.v = hhpop.bioPhys1_membraneProperties_initMembPotential_value


# Inputs
#    Input pulseGen1 on: null of hhpop[0]: pulseGen1 (Type: pulseGenerator:  delay=0.1 (SI time) duration=0.1 (SI time) amplitude=8.000000000000001E-11 (SI current))
hhpop_iSyn = TimedArray( np.concatenate( ( 
         np.repeat(0, int(0.1/defaultclock.dt)) , 
         np.repeat(8.0E-11, int(0.1/defaultclock.dt)) , 
         np.repeat(0, (steps - int(0.2/defaultclock.dt))) ) ) * amp , 
         dt=defaultclock.dt)


if show_gui:

    # Display: Component(id=d1 type=Display)
    trace_d1__v = StateMonitor(hhpop,'v',record=[0]) # v (Type: Line:  scale=0.001 (dimensionless) timeScale=0.001 (dimensionless))
    trace_d1__spiking = StateMonitor(hhpop,'spiking',record=[0]) # spiking (Type: Line:  scale=0.1 (dimensionless) timeScale=0.001 (dimensionless))

    # Display: Component(id=d2 type=Display)
    trace_d2__m = StateMonitor(hhpop,'bioPhys1_membraneProperties_naChans_naChan_m_q',record=[0]) # m (Type: Line:  scale=1.0 (dimensionless) timeScale=0.001 (dimensionless))
    trace_d2__h = StateMonitor(hhpop,'bioPhys1_membraneProperties_naChans_naChan_h_q',record=[0]) # h (Type: Line:  scale=1.0 (dimensionless) timeScale=0.001 (dimensionless))
    trace_d2__n = StateMonitor(hhpop,'bioPhys1_membraneProperties_kChans_kChan_n_q',record=[0]) # n (Type: Line:  scale=1.0 (dimensionless) timeScale=0.001 (dimensionless))

    # Display: Component(id=d3 type=Display)
    trace_d3__ina = StateMonitor(hhpop,'bioPhys1_membraneProperties_naChans_iDensity',record=[0]) # ina (Type: Line:  scale=1.0 (dimensionless) timeScale=0.001 (dimensionless))
    trace_d3__ik = StateMonitor(hhpop,'bioPhys1_membraneProperties_kChans_iDensity',record=[0]) # ik (Type: Line:  scale=1.0 (dimensionless) timeScale=0.001 (dimensionless))

    # Display: Component(id=d4 type=Display)
    trace_d4__gna = StateMonitor(hhpop,'bioPhys1_membraneProperties_naChans_gDensity',record=[0]) # gna (Type: Line:  scale=1.0 (dimensionless) timeScale=0.001 (dimensionless))
    trace_d4__gk = StateMonitor(hhpop,'bioPhys1_membraneProperties_kChans_gDensity',record=[0]) # gk (Type: Line:  scale=1.0 (dimensionless) timeScale=0.001 (dimensionless))

# Saving to file: ex5_v.dat, reference: of0
record_of0__v = StateMonitor(hhpop,'v',record=[0]) # v (Type: OutputColumn)

# Saving to file: ex5_vars.dat, reference: of1
record_of1__m = StateMonitor(hhpop,'bioPhys1_membraneProperties_naChans_naChan_m_q',record=[0]) # m (Type: OutputColumn)
record_of1__h = StateMonitor(hhpop,'bioPhys1_membraneProperties_naChans_naChan_h_q',record=[0]) # h (Type: OutputColumn)
record_of1__n = StateMonitor(hhpop,'bioPhys1_membraneProperties_kChans_kChan_n_q',record=[0]) # n (Type: OutputColumn)

print("Running simulation for %s (dt = %s, #steps = %s, code generation target = %s)"%(duration,defaultclock.dt, steps, prefs.codegen.target))
run(duration) # Run a simulation from t=0 to just before t=duration 
run(defaultclock.dt) # Run one more time step to allow saving the point at t=duration

# Saving to file: ex5_v.dat, reference: of0
all_of0 = np.array( [ record_of0__v.t, record_of0__v.v[0]  ] )
all_of0 = all_of0.transpose()
file_of0 = open("ex5_v.dat", 'w')
for l in all_of0:
    line = ''
    for c in l: 
        line = line + ('\t%s'%c if len(line)>0 else '%s'%c)
    file_of0.write(line+'\n')
file_of0.close()

# Saving to file: ex5_vars.dat, reference: of1
all_of1 = np.array( [ record_of1__m.t, record_of1__m.bioPhys1_membraneProperties_naChans_naChan_m_q[0] , record_of1__h.bioPhys1_membraneProperties_naChans_naChan_h_q[0] , record_of1__n.bioPhys1_membraneProperties_kChans_kChan_n_q[0]  ] )
all_of1 = all_of1.transpose()
file_of1 = open("ex5_vars.dat", 'w')
for l in all_of1:
    line = ''
    for c in l: 
        line = line + ('\t%s'%c if len(line)>0 else '%s'%c)
    file_of1.write(line+'\n')
file_of1.close()

if show_gui:

    import matplotlib.pyplot as plt

    # Display: Component(id=d1 type=Display)
    display_d1 = plt.figure("Ex5: HH cell with simple morphology: voltage")
    plot_v = display_d1.add_subplot(111, autoscale_on=True)
    plot_v.plot(trace_d1__v.t/second,trace_d1__v.v[0], color="#cccccc", label="v")
    plot_v.legend()
    plot_spiking = display_d1.add_subplot(111, autoscale_on=True)
    plot_spiking.plot(trace_d1__spiking.t/second,trace_d1__spiking.spiking[0], color="#004040", label="spiking")
    plot_spiking.legend()

    # Display: Component(id=d2 type=Display)
    display_d2 = plt.figure("Ex5: HH cell with simple morphology: rate variables")
    plot_m = display_d2.add_subplot(111, autoscale_on=True)
    plot_m.plot(trace_d2__m.t/second,trace_d2__m.bioPhys1_membraneProperties_naChans_naChan_m_q[0], color="#000000", label="m")
    plot_m.legend()
    plot_h = display_d2.add_subplot(111, autoscale_on=True)
    plot_h.plot(trace_d2__h.t/second,trace_d2__h.bioPhys1_membraneProperties_naChans_naChan_h_q[0], color="#ff0000", label="h")
    plot_h.legend()
    plot_n = display_d2.add_subplot(111, autoscale_on=True)
    plot_n.plot(trace_d2__n.t/second,trace_d2__n.bioPhys1_membraneProperties_kChans_kChan_n_q[0], color="#0000ff", label="n")
    plot_n.legend()

    # Display: Component(id=d3 type=Display)
    display_d3 = plt.figure("Ex5: HH cell with simple morphology: current densities")
    plot_ina = display_d3.add_subplot(111, autoscale_on=True)
    plot_ina.plot(trace_d3__ina.t/second,trace_d3__ina.bioPhys1_membraneProperties_naChans_iDensity[0], color="#000000", label="ina")
    plot_ina.legend()
    plot_ik = display_d3.add_subplot(111, autoscale_on=True)
    plot_ik.plot(trace_d3__ik.t/second,trace_d3__ik.bioPhys1_membraneProperties_kChans_iDensity[0], color="#ff0000", label="ik")
    plot_ik.legend()

    # Display: Component(id=d4 type=Display)
    display_d4 = plt.figure("Ex5: HH cell with simple morphology: conductance densities")
    plot_gna = display_d4.add_subplot(111, autoscale_on=True)
    plot_gna.plot(trace_d4__gna.t/second,trace_d4__gna.bioPhys1_membraneProperties_naChans_gDensity[0], color="#000000", label="gna")
    plot_gna.legend()
    plot_gk = display_d4.add_subplot(111, autoscale_on=True)
    plot_gk.plot(trace_d4__gk.t/second,trace_d4__gk.bioPhys1_membraneProperties_kChans_gDensity[0], color="#ff0000", label="gk")
    plot_gk.legend()
    plt.show()
