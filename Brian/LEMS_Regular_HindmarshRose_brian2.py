'''
Brian simulator compliant Python export for:

Components:
    hr_regular (Type: hindmarshRoseCell:  a=1.0 (dimensionless) b=3.0 (dimensionless) c=-3.0 (dimensionless) d=5.0 (dimensionless) I=5.0 (dimensionless) r=0.002 (dimensionless) s=4.0 (dimensionless) x1=-1.3 (dimensionless) x0=-1.3 (dimensionless) y0=-1.0 (dimensionless) z0=1.0 (dimensionless) SEC=1.0 (SI time))
    net1 (Type: network)
    sim1 (Type: Simulation:  length=2000.0 (SI time) step=0.005 (SI time))

'''
'''
    This Brian file has been generated by org.neuroml.export (see https://github.com/NeuroML/org.neuroml.export)
         org.neuroml.export  v1.5.2
         org.neuroml.model   v1.5.2
         jLEMS               v0.9.8.9
'''
from brian2 import *

from math import *
import sys

import numpy as np


if len(sys.argv) > 1 and sys.argv[1] == '-nogui':
    show_gui = False
else:
    show_gui = True

# Adding simulation Component(id=sim1 type=Simulation) of network: net1 (Type: network)

defaultclock.dt = 5.0*msecond
duration = 2000000.0*msecond
steps = int(duration/defaultclock.dt)

#    Population hr_regular_pop contains components of: Component(id=hr_regular type=hindmarshRoseCell) 

hr_regular_eqs=Equations('''
    dx/dt = ((phi - z) / SEC) :  1
    dy/dt = (chi / SEC) :  1
    dz/dt = (r * (rho / SEC)) :  1
    SEC = 1.0 * second : second 
    a = 1.0: 1 
    b = 3.0: 1 
    c = -3.0: 1 
    d = 5.0: 1 
    I = 5.0: 1 
    r = 0.002: 1 
    s = 4.0: 1 
    x1 = -1.3: 1 
    x0 = -1.3: 1 
    y0 = -1.0: 1 
    z0 = 1.0: 1 
    phi = (((y - (a * (x ** 3.0))) + (b * (x ** 2.0))) + I) :  1
    chi = ((c - (d * (x ** 2.0))) - y) :  1
    rho = ((s * (x - x1)) - z) :  1
''')

hr_regular_pop = NeuronGroup(1, model=hr_regular_eqs)
hr_regular_pop.x = hr_regular_pop.x0
hr_regular_pop.y = hr_regular_pop.y0
hr_regular_pop.z = hr_regular_pop.z0
# Initialise a second time...
hr_regular_pop.x = hr_regular_pop.x0
hr_regular_pop.y = hr_regular_pop.y0
hr_regular_pop.z = hr_regular_pop.z0


# Inputs

if show_gui:

    # Display: Component(id=d1 type=Display)
    trace_d1__x = StateMonitor(hr_regular_pop,'x',record=[0]) # x (Type: Line:  scale=1.0 (dimensionless) timeScale=1.0 (dimensionless))

    # Display: Component(id=d2 type=Display)
    trace_d2__y = StateMonitor(hr_regular_pop,'y',record=[0]) # y (Type: Line:  scale=1.0 (dimensionless) timeScale=1.0 (dimensionless))

    # Display: Component(id=d3 type=Display)
    trace_d3__z = StateMonitor(hr_regular_pop,'z',record=[0]) # z (Type: Line:  scale=1.0 (dimensionless) timeScale=1.0 (dimensionless))

# Saving to file: hr.dat, reference: of0
record_of0__x = StateMonitor(hr_regular_pop,'x',record=[0]) # x (Type: OutputColumn)
record_of0__y = StateMonitor(hr_regular_pop,'y',record=[0]) # y (Type: OutputColumn)
record_of0__z = StateMonitor(hr_regular_pop,'z',record=[0]) # z (Type: OutputColumn)

print("Running simulation for %s (dt = %s, #steps = %s, code generation target = %s)"%(duration,defaultclock.dt, steps, prefs.codegen.target))
run(duration)

# Saving to file: hr.dat, reference: of0
all_of0 = np.array( [ record_of0__x.t, record_of0__x.x[0] , record_of0__y.y[0] , record_of0__z.z[0]  ] )
all_of0 = all_of0.transpose()
file_of0 = open("hr.dat", 'w')
for l in all_of0:
    line = ''
    for c in l: 
        line = line + (' %s'%c if len(line)>0 else '%s'%c)
    file_of0.write(line+'\n')
file_of0.close()

if show_gui:

    import matplotlib.pyplot as plt

    # Display: Component(id=d1 type=Display)
    display_d1 = plt.figure("Hindmarsh-Rose example run")
    plot_x = display_d1.add_subplot(111, autoscale_on=True)
    plot_x.plot(trace_d1__x.t/second,trace_d1__x.x[0], color="#000000", label="x")
    plot_x.legend()

    # Display: Component(id=d2 type=Display)
    display_d2 = plt.figure("y timeseries")
    plot_y = display_d2.add_subplot(111, autoscale_on=True)
    plot_y.plot(trace_d2__y.t/second,trace_d2__y.y[0], color="#0000ff", label="y")
    plot_y.legend()

    # Display: Component(id=d3 type=Display)
    display_d3 = plt.figure("z timeseries")
    plot_z = display_d3.add_subplot(111, autoscale_on=True)
    plot_z.plot(trace_d3__z.t/second,trace_d3__z.z[0], color="#00ff00", label="z")
    plot_z.legend()
    plt.show()
