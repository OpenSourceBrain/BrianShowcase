'''
Brian simulator compliant Python export for:

Components:
    ml1 (Type: morrisLecarSCell:  C=20.0 (dimensionless) I=65.0 (dimensionless) gL=2.0 (dimensionless) gCa=4.0 (dimensionless) gK=8.0 (dimensionless) VL=-50.0 (dimensionless) VCa=100.0 (dimensionless) VK=-70.0 (dimensionless) V1=0.0 (dimensionless) V2=15.0 (dimensionless) V3=10.0 (dimensionless) V4=10.0 (dimensionless) T0=0.1 (dimensionless) MSEC=0.001 (SI time))
    net1 (Type: network)
    sim1 (Type: Simulation:  length=0.22 (SI time) step=5.0E-6 (SI time))

'''
'''
    This Brian file has been generated by org.neuroml.export (see https://github.com/NeuroML/org.neuroml.export)
         org.neuroml.export  v1.4.2
         org.neuroml.model   v1.4.2
         jLEMS               v0.9.7.3
'''
from brian2 import *

from math import *
import sys
import numpy as np


if len(sys.argv) > 1 and sys.argv[1] == '-nogui':
    show_gui = False
else:
    show_gui = True

# Adding simulation Component(id=sim1 type=Simulation) of network: net1 (Type: network)
#    Population ml1pop contains components of: Component(id=ml1 type=morrisLecarSCell) 

MSEC = 0.001 * second 
C = 20.0 
I = 65.0 
gL = 2.0 
gCa = 4.0 
gK = 8.0 
VL = -50.0 
VCa = 100.0 
VK = -70.0 
V1 = 0.0 
V2 = 15.0 
V3 = 10.0 
V4 = 10.0 
T0 = 0.1 

ml1_eqs=Equations('''
    dV/dt = ((((I - IL) - ICa) - IK) / (C * MSEC)) :  1
    dW/dt = (T0 * ((Wss - W) / (Tw * MSEC))) :  1
    Mss = (1.0 / (1.0 + exp((0.0 - (2.0 * ((V - V1) / V2)))))) :  1
    Wss = (1.0 / (1.0 + exp((0.0 - (2.0 * ((V - V3) / V4)))))) :  1
    Tw = (2.0 / (exp(((V - V3) / (2.0 * V4))) + exp((0.0 - ((V - V3) / (2.0 * V4)))))) :  1
    IL = (gL * (V - VL)) :  1
    ICa = ((gCa * Mss) * (V - VCa)) :  1
    IK = ((gK * W) * (V - VK)) :  1
''')

ml1pop = NeuronGroup(1, model=ml1_eqs)
ml1pop.V = VL
ml1pop.W = (1.0 / (1.0 + exp((0.0 - (2.0 * (( VL  - V3) / V4))))))

if show_gui:

    # Display: Component(id=d1 type=Display)
    trace_d1__V = StateMonitor(ml1pop,'V',record=[0]) # V (Type: Line:  scale=1.0 (dimensionless) timeScale=0.001 (dimensionless))

    # Display: Component(id=d2 type=Display)
    trace_d2__IL = StateMonitor(ml1pop,'IL',record=[0]) # IL (Type: Line:  scale=1.0 (dimensionless) timeScale=0.001 (dimensionless))
    trace_d2__IK = StateMonitor(ml1pop,'IK',record=[0]) # IK (Type: Line:  scale=1.0 (dimensionless) timeScale=0.001 (dimensionless))
    trace_d2__ICa = StateMonitor(ml1pop,'ICa',record=[0]) # ICa (Type: Line:  scale=1.0 (dimensionless) timeScale=0.001 (dimensionless))

    # Display: Component(id=d3 type=Display)
    trace_d3__W = StateMonitor(ml1pop,'W',record=[0]) # W (Type: Line:  scale=1.0 (dimensionless) timeScale=0.001 (dimensionless))
    trace_d3__Wss = StateMonitor(ml1pop,'Wss',record=[0]) # Wss (Type: Line:  scale=1.0 (dimensionless) timeScale=0.001 (dimensionless))
    trace_d3__Mss = StateMonitor(ml1pop,'Mss',record=[0]) # Mss (Type: Line:  scale=1.0 (dimensionless) timeScale=0.001 (dimensionless))

    # Display: Component(id=d4 type=Display)
    trace_d4__Tw = StateMonitor(ml1pop,'Tw',record=[0]) # Tw (Type: Line:  scale=1.0 (dimensionless) timeScale=0.001 (dimensionless))

# Saving to file: ML_S.dat, reference: PlotV
record_PlotV__V = StateMonitor(ml1pop,'V',record=[0]) # V (Type: OutputColumn)
print("Running simulation for 220ms (dt = 0.005ms)")

defaultclock.dt = 0.005*msecond
run(220*msecond)

# Saving to file: ML_S.dat, reference: PlotV
all_PlotV = np.array( [ record_PlotV__V.t, record_PlotV__V.V[0]  ] )
all_PlotV = all_PlotV.transpose()
file_PlotV = open("ML_S.dat", 'w')
for l in all_PlotV:
    line = ''
    for c in l: 
        line = line + (' %f'%c if len(line)>0 else '%f'%c)
    file_PlotV.write(line+'\n')
file_PlotV.close()

if show_gui:

    import matplotlib.pyplot as plt

    # Display: Component(id=d1 type=Display)
    display_d1 = plt.figure("Fig 6 from Morris and Lecar 1981: membrane potential")
    plot_V = display_d1.add_subplot(111, autoscale_on=True)
    plot_V.plot(trace_d1__V.t/second,trace_d1__V.V[0], color="#000000", label="V")
    plot_V.legend()

    # Display: Component(id=d2 type=Display)
    display_d2 = plt.figure("Currents: IL, IK and ICa")
    plot_IL = display_d2.add_subplot(111, autoscale_on=True)
    plot_IL.plot(trace_d2__IL.t/second,trace_d2__IL.IL[0], color="#000FFF", label="IL")
    plot_IL.legend()
    plot_IK = display_d2.add_subplot(111, autoscale_on=True)
    plot_IK.plot(trace_d2__IK.t/second,trace_d2__IK.IK[0], color="#FF22FF", label="IK")
    plot_IK.legend()
    plot_ICa = display_d2.add_subplot(111, autoscale_on=True)
    plot_ICa.plot(trace_d2__ICa.t/second,trace_d2__ICa.ICa[0], color="#FF0000", label="ICa")
    plot_ICa.legend()

    # Display: Component(id=d3 type=Display)
    display_d3 = plt.figure("W and W, M steady state values value")
    plot_W = display_d3.add_subplot(111, autoscale_on=True)
    plot_W.plot(trace_d3__W.t/second,trace_d3__W.W[0], color="#4444FF", label="W")
    plot_W.legend()
    plot_Wss = display_d3.add_subplot(111, autoscale_on=True)
    plot_Wss.plot(trace_d3__Wss.t/second,trace_d3__Wss.Wss[0], color="#000000", label="Wss")
    plot_Wss.legend()
    plot_Mss = display_d3.add_subplot(111, autoscale_on=True)
    plot_Mss.plot(trace_d3__Mss.t/second,trace_d3__Mss.Mss[0], color="#ff9966", label="Mss")
    plot_Mss.legend()

    # Display: Component(id=d4 type=Display)
    display_d4 = plt.figure("Time course of W")
    plot_Tw = display_d4.add_subplot(111, autoscale_on=True)
    plot_Tw.plot(trace_d4__Tw.t/second,trace_d4__Tw.Tw[0], color="#000000", label="Tw")
    plot_Tw.legend()
    plt.show()
