'''
Brian simulator compliant Python export for:

Components:
    hr_regular (Type: hindmarshRoseCell:  a=1.0 (dimensionless) b=3.0 (dimensionless) c=-3.0 (dimensionless) d=5.0 (dimensionless) I=5.0 (dimensionless) r=0.002 (dimensionless) s=4.0 (dimensionless) x1=-1.3 (dimensionless) x0=-1.3 (dimensionless) y0=-1.0 (dimensionless) z0=1.0 (dimensionless) SEC=1.0 (SI time))
    net1 (Type: network)
    sim1 (Type: Simulation:  length=2000.0 (SI time) step=0.005 (SI time))

'''
'''
    This Brian file has been generated by org.neuroml.export (see https://github.com/NeuroML/org.neuroml.export)
         org.neuroml.export  v1.4.2
         org.neuroml.model   v1.4.2
         jLEMS               v0.9.7.3
'''
from brian2 import *

from math import *
import sys


if len(sys.argv) > 1 and sys.argv[1] == '-nogui':
    show_gui = False
else:
    show_gui = True

# Adding simulation Component(id=sim1 type=Simulation) of network: net1 (Type: network)
#    Population hr_regular_pop contains components of: Component(id=hr_regular type=hindmarshRoseCell) 

SEC = 1.0 * second 
a = 1.0 
b = 3.0 
c = -3.0 
d = 5.0 
I = 5.0 
r = 0.002 
s = 4.0 
x1 = -1.3 
x0 = -1.3 
y0 = -1.0 
z0 = 1.0 

hr_regular_eqs=Equations('''
    dx/dt = ((phi - z) / SEC) :  1
    dy/dt = (chi / SEC) :  1
    dz/dt = (r * (rho / SEC)) :  1
    phi = (((y - (a * (x ** 3.0))) + (b * (x ** 2.0))) + I) :  1
    chi = ((c - (d * (x ** 2.0))) - y) :  1
    rho = ((s * (x - x1)) - z) :  1
''')

hr_regular_pop = NeuronGroup(1, model=hr_regular_eqs)
hr_regular_pop.x = x0
hr_regular_pop.y = y0
hr_regular_pop.z = z0

if show_gui:

    # Display: Component(id=d1 type=Display)
    trace_d1__x = StateMonitor(hr_regular_pop,'x',record=[0]) # x (Type: Line:  scale=1.0 (dimensionless) timeScale=1.0 (dimensionless))

    # Display: Component(id=d2 type=Display)
    trace_d2__y = StateMonitor(hr_regular_pop,'y',record=[0]) # y (Type: Line:  scale=1.0 (dimensionless) timeScale=1.0 (dimensionless))

    # Display: Component(id=d3 type=Display)
    trace_d3__z = StateMonitor(hr_regular_pop,'z',record=[0]) # z (Type: Line:  scale=1.0 (dimensionless) timeScale=1.0 (dimensionless))
print("Running simulation for 2000s (dt = 0.005s)")

defaultclock.dt = 0.005*second
run(2000*second)

if show_gui:

    import matplotlib.pyplot as plt

    # Display: Component(id=d1 type=Display)
    display_d1 = plt.figure("Hindmarsh-Rose example run")
    plot_x = display_d1.add_subplot(111, autoscale_on=True)
    plot_x.plot(trace_d1__x.t/second,trace_d1__x.x[0], color="#000000", label="x")
    plot_x.legend()

    # Display: Component(id=d2 type=Display)
    display_d2 = plt.figure("y timeseries")
    plot_y = display_d2.add_subplot(111, autoscale_on=True)
    plot_y.plot(trace_d2__y.t/second,trace_d2__y.y[0], color="#0000ff", label="y")
    plot_y.legend()

    # Display: Component(id=d3 type=Display)
    display_d3 = plt.figure("z timeseries")
    plot_z = display_d3.add_subplot(111, autoscale_on=True)
    plot_z.plot(trace_d3__z.t/second,trace_d3__z.z[0], color="#00ff00", label="z")
    plot_z.legend()
    plt.show()
